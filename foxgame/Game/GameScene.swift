import SpriteKit

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–∑–ª–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ A*
class Node {
    let position: CGPoint
    let g: CGFloat // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Ç–∏ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ —É–∑–ª–∞
    let h: CGFloat // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ (–º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏)
    let f: CGFloat // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (g + h)
    let parent: Node? // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
    init(position: CGPoint, g: CGFloat, h: CGFloat, parent: Node? = nil) {
        self.position = position
        self.g = g
        self.h = h
        self.f = g + h
        self.parent = parent
    }
}

class GameScene: SKScene {
    var chicken: SKSpriteNode!
    var eggs: [SKSpriteNode] = []
    var walls: [SKSpriteNode] = []
    var fox: SKSpriteNode!
    weak var joystick: Joystick?

    var lastPathUpdateTime: TimeInterval = 0 // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
    let pathUpdateInterval: TimeInterval = 1 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
    // –°–µ—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    let gridCellSize: CGFloat = 20 // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏
    var gridWidth: Int = 0
    var gridHeight: Int = 0
    var grid: [[Bool]] = [] // true - –ø—Ä–æ—Ö–æ–¥–∏–º–æ, false - —Å—Ç–µ–Ω–∞
    var path: [CGPoint] = [] // –ü—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏—Å–∞
    let cellSize = CGSize(width: 100, height: 100)
    let wallWidth: CGFloat = 10
    
   
    override func didMove(to view: SKView) {
        print("–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã: \(size), frame: \(frame.size)")
//        backgroundColor = .green
//        physicsBody = SKPhysicsBody(edgeLoopFrom: frame)
        physicsBody?.isDynamic = false
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º backgroundField
        let defaults = UserDefaults.standard
        
            let background = SKSpriteNode(imageNamed: "field\(defaults.integer(forKey: "field"))1")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ü–µ–Ω—ã
            background.position = CGPoint(x: frame.midX, y: frame.midY)
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—É —Å—Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            background.size = self.size
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º zPosition, —á—Ç–æ–±—ã —Ñ–æ–Ω –±—ã–ª –ø–æ–∑–∞–¥–∏ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            background.zPosition = -1
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç –Ω–∞ —Å—Ü–µ–Ω—É
            addChild(background)
            
            physicsBody = SKPhysicsBody(edgeLoopFrom: frame)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏
        initializeGrid()

        // –°–æ–∑–¥–∞—ë–º –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–µ–Ω—ã
        createOuterWalls()

        // –°–æ–∑–¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã
        createInnerWalls()

        // –°–æ–∑–¥–∞—ë–º –∫—É—Ä–∏—Ü—É
        spawnChicken()

        // –°–æ–∑–¥–∞—ë–º –ª–∏—Å—É
//        fox = SKSpriteNode(color: .brown, size: CGSize(width: 30, height: 30))
//        let defaults = UserDefaults.standard
        print((defaults.integer(forKey: "player")))
        fox = SKSpriteNode(imageNamed: "fox\(defaults.integer(forKey: "player"))1")
        fox.size = CGSize(width: 30, height: 30)
        fox.position = CGPoint(x: size.width * 3 / 4, y: size.height * 3 / 4)
        fox.physicsBody = SKPhysicsBody(rectangleOf: fox.size)
        fox.physicsBody?.isDynamic = true
        fox.physicsBody?.categoryBitMask = 3
        fox.physicsBody?.collisionBitMask = 1
        fox.physicsBody?.contactTestBitMask = 1
        fox.physicsBody?.affectedByGravity = false // –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        addChild(fox)

        // –°–æ–∑–¥–∞—ë–º —è–π—Ü–∞
        createEggs()
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    func initializeGrid() {
        gridWidth = Int(size.width / gridCellSize)
        gridHeight = Int(size.height / gridCellSize)
        grid = Array(repeating: Array(repeating: true, count: gridWidth), count: gridHeight)

        // –û—Ç–º–µ—á–∞–µ–º —è—á–µ–π–∫–∏, –∑–∞–Ω—è—Ç—ã–µ —Å—Ç–µ–Ω–∞–º–∏
        for wall in walls {
            let minX = Int(wall.frame.minX / gridCellSize)
            let maxX = Int(wall.frame.maxX / gridCellSize)
            let minY = Int(wall.frame.minY / gridCellSize)
            let maxY = Int(wall.frame.maxY / gridCellSize)
            let startY = max(0, minY)
            let endY = min(gridHeight - 1, maxY)
            if startY <= endY {
                for y in startY...endY {
                    let startX = max(0, minX)
                    let endX = min(gridWidth - 1, maxX)
                    if startX <= endX {
                        for x in startX...endX {
                            grid[y][x] = false
                        }
                    }
                }
            }
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∏–Ω–¥–µ–∫—Å—ã —Å–µ—Ç–∫–∏
    func gridPosition(_ point: CGPoint) -> (Int, Int) {
        let x = Int(point.x / gridCellSize)
        let y = Int(point.y / gridCellSize)
        return (max(0, min(x, gridWidth - 1)), max(0, min(y, gridHeight - 1)))
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–µ—Ç–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    func pointFromGrid(_ x: Int, _ y: Int) -> CGPoint {
        return CGPoint(x: CGFloat(x) * gridCellSize + gridCellSize / 2,
                       y: CGFloat(y) * gridCellSize + gridCellSize / 2)
    }

    // –ê–ª–≥–æ—Ä–∏—Ç–º A* –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    func findPath(from start: CGPoint, to goal: CGPoint) -> [CGPoint] {
        let (startX, startY) = gridPosition(start)
        let (goalX, goalY) = gridPosition(goal)
        var openList: [Node] = []
        var closedList: Set<String> = []
        let startNode = Node(position: pointFromGrid(startX, startY), g: 0, h: manhattanDistance(from: (startX, startY), to: (goalX, goalY)))
        openList.append(startNode)

        while !openList.isEmpty {
            // –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é f
            openList.sort { $0.f < $1.f }
            let currentNode = openList.removeFirst()
            let (currentX, currentY) = gridPosition(currentNode.position)
            let key = "\(currentX),\(currentY)"
            if closedList.contains(key) { continue }
            closedList.insert(key)

            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
            if currentX == goalX && currentY == goalY {
                var path: [CGPoint] = []
                var node: Node? = currentNode
                while let current = node {
                    path.append(current.position)
                    node = current.parent
                }
                return path.reversed()
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
            let directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            for (dx, dy) in directions {
                let newX = currentX + dx
                let newY = currentY + dy
                if newX < 0 || newX >= gridWidth || newY < 0 || newY >= gridHeight { continue }
                if !grid[newY][newX] { continue }
                if closedList.contains("\(newX),\(newY)") { continue }
                let newPosition = pointFromGrid(newX, newY)
                let g = currentNode.g + gridCellSize
                let h = manhattanDistance(from: (newX, newY), to: (goalX, goalY))
                let newNode = Node(position: newPosition, g: g, h: h, parent: currentNode)
                openList.append(newNode)
            }
        }
        return [] // –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    // –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    func manhattanDistance(from: (Int, Int), to: (Int, Int)) -> CGFloat {
        return CGFloat(abs(from.0 - to.0) + abs(from.1 - to.1)) * gridCellSize
    }

    func spawnChicken() {
        let maxCols = Int(size.width / cellSize.width)
        let maxRows = Int(size.height / cellSize.height)
        guard maxCols > 0, maxRows > 0 else {
            print("–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª!")
            return
        }
//        chicken = SKSpriteNode(color: .yellow, size: CGSize(width: 30, height: 30))
        chicken = SKSpriteNode(imageNamed: "chicken")
        chicken.size = CGSize(width: 30, height: 30)
        chicken.zPosition = 10
        var spawnPosition: CGPoint?
        var attempts = 100
        while spawnPosition == nil && attempts > 0 {
            let col = Int.random(in: 0..<maxCols)
            let row = Int.random(in: 0..<maxRows)
            let potentialPosition = CGPoint(x: CGFloat(col) * cellSize.width + cellSize.width / 2,
                                           y: CGFloat(row) * cellSize.height + cellSize.height / 2)
            let isBlocked = walls.contains { $0.frame.contains(potentialPosition) }
            if !isBlocked {
                spawnPosition = potentialPosition
            }
            attempts -= 1
        }
        guard let finalPosition = spawnPosition else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫—É—Ä–∏—Ü—ã üò¢")
            return
        }
        chicken.position = finalPosition
        chicken.physicsBody = SKPhysicsBody(rectangleOf: chicken.size)
        chicken.physicsBody?.isDynamic = true
        chicken.physicsBody?.categoryBitMask = 2
        chicken.physicsBody?.collisionBitMask = 1
        chicken.physicsBody?.contactTestBitMask = 1
        chicken.physicsBody?.affectedByGravity = false
        addChild(chicken)
    }

    func createOuterWalls() {
        // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∫–∞
        let topWall = SKSpriteNode(color: .brown, size: CGSize(width: size.width, height: wallWidth))
        topWall.position = CGPoint(x: size.width / 2, y: size.height - wallWidth / 2)
        setupWallPhysics(topWall)
        addChild(topWall)
        walls.append(topWall)

        // –ù–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞
        let bottomWall = SKSpriteNode(color: .brown, size: CGSize(width: size.width, height: wallWidth))
        bottomWall.position = CGPoint(x: size.width / 2, y: wallWidth / 2)
        setupWallPhysics(bottomWall)
        addChild(bottomWall)
        walls.append(bottomWall)

        // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∫–∞
        let leftWall = SKSpriteNode(color: .brown, size: CGSize(width: wallWidth, height: size.height))
        leftWall.position = CGPoint(x: wallWidth / 2, y: size.height / 2)
        setupWallPhysics(leftWall)
        addChild(leftWall)
        walls.append(leftWall)

        // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∫–∞
        let rightWall = SKSpriteNode(color: .brown, size: CGSize(width: wallWidth, height: size.height))
        rightWall.position = CGPoint(x: size.width - wallWidth / 2, y: size.height / 2)
        setupWallPhysics(rightWall)
        addChild(rightWall)
        walls.append(rightWall)
    }

    func createInnerWalls() {
        let rows = 2 // 2 —Ä—è–¥–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        let cols = 3 // 3 —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏

        // –†–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫
        let cellWidth = size.width / CGFloat(cols)
        let cellHeight = size.height / CGFloat(rows)

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—Ö–æ–¥–∞ (1.7 * –≤—ã—Å–æ—Ç–∞ –∫—É—Ä–∏—Ü—ã)
        let chickenHeight: CGFloat = 30 // –í—ã—Å–æ—Ç–∞ –∫—É—Ä–∏—Ü—ã –∏–∑ spawnChicken()
        let minGapSize: CGFloat = 1.7 * chickenHeight // 51

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–µ–Ω—ã: —Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Ö–æ–¥–∞–º–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        for col in 1..<cols {
            let wallX = CGFloat(col) * cellWidth

            // –°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–≤—É—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤
            let totalGapsHeight = 2 * minGapSize // 102
            let remainingHeight = max(size.height - totalGapsHeight, 0) // –û—Å—Ç–∞–≤—à–∞—è—Å—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤

            // –í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç—ã (–ø–æ 20% –æ—Ç –æ—Å—Ç–∞–≤—à–µ–π—Å—è –≤—ã—Å–æ—Ç—ã)
            let topBottomSegmentHeight = remainingHeight * 0.2

            // –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç (60% –æ—Ç –æ—Å—Ç–∞–≤—à–µ–π—Å—è –≤—ã—Å–æ—Ç—ã)
            let middleSegmentHeight = remainingHeight * 0.6

            // –í–µ—Ä—Ö–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            let topSegment = SKSpriteNode(color: .brown, size: CGSize(width: wallWidth, height: topBottomSegmentHeight))
            topSegment.position = CGPoint(x: wallX, y: size.height - topBottomSegmentHeight / 2)
            setupWallPhysics(topSegment)
            addChild(topSegment)
            walls.append(topSegment)

            // –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            let middleSegment = SKSpriteNode(color: .brown, size: CGSize(width: wallWidth, height: middleSegmentHeight))
            middleSegment.position = CGPoint(x: wallX, y: (size.height - topBottomSegmentHeight - minGapSize) - middleSegmentHeight / 2)
            setupWallPhysics(middleSegment)
            addChild(middleSegment)
            walls.append(middleSegment)

            // –ù–∏–∂–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            let bottomSegment = SKSpriteNode(color: .brown, size: CGSize(width: wallWidth, height: topBottomSegmentHeight))
            bottomSegment.position = CGPoint(x: wallX, y: topBottomSegmentHeight / 2)
            setupWallPhysics(bottomSegment)
            addChild(bottomSegment)
            walls.append(bottomSegment)
        }

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–µ–Ω–∞: —Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Ö–æ–¥–∞–º–∏, —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –≤ 3 —Ä–∞–∑–∞
        let gapWidth = minGapSize * 3 // 153 (–≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ minGapSize)
        let totalGapsWidth = 2 * gapWidth // 306
        let remainingWidth = max(size.width - totalGapsWidth, 0) // –û—Å—Ç–∞–≤—à–∞—è—Å—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        let segmentWidth = remainingWidth / 3 // –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        let wallY = cellHeight // –ü–æ–∑–∏—Ü–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω—ã

        // –õ–µ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        let leftSegment = SKSpriteNode(color: .brown, size: CGSize(width: segmentWidth, height: wallWidth))
        leftSegment.position = CGPoint(x: segmentWidth / 2, y: wallY)
        setupWallPhysics(leftSegment)
        addChild(leftSegment)
        walls.append(leftSegment)

        // –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
        let middleSegment = SKSpriteNode(color: .brown, size: CGSize(width: segmentWidth, height: wallWidth))
        middleSegment.position = CGPoint(x: segmentWidth + gapWidth + segmentWidth / 2, y: wallY)
        setupWallPhysics(middleSegment)
        addChild(middleSegment)
        walls.append(middleSegment)

        // –ü—Ä–∞–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        let rightSegment = SKSpriteNode(color: .brown, size: CGSize(width: segmentWidth, height: wallWidth))
        rightSegment.position = CGPoint(x: size.width - (segmentWidth / 2), y: wallY)
        setupWallPhysics(rightSegment)
        addChild(rightSegment)
        walls.append(rightSegment)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–Ω
        initializeGrid()
    }

    func setupWallPhysics(_ wall: SKSpriteNode) {
        wall.physicsBody = SKPhysicsBody(rectangleOf: wall.size)
        wall.physicsBody?.isDynamic = false
        wall.physicsBody?.categoryBitMask = 1
        wall.physicsBody?.collisionBitMask = 2 | 3
        wall.physicsBody?.contactTestBitMask = 2 | 3
        wall.physicsBody?.affectedByGravity = false
        wall.name = "wall"
    }

//    func createEggs() {
//        let rows = Int(size.height / cellSize.height)
//        let cols = Int(size.width / cellSize.width)
//        for row in 0..<rows {
//            for col in 0..<cols {
//                let cellRect = CGRect(
//                    x: CGFloat(col) * cellSize.width,
//                    y: CGFloat(row) * cellSize.height,
//                    width: cellSize.width,
//                    height: cellSize.height
//                )
//                let numEggs = Int.random(in: 1...2)
//                for _ in 0..<numEggs {
////                    let egg = SKSpriteNode(color: .white, size: CGSize(width: 20, height: 20))
//                    let egg = SKSpriteNode(imageNamed: "eggWhite")
//                    egg.size = CGSize(width: 20, height: 20)
//                    egg.position = CGPoint(
//                        x: CGFloat.random(in: cellRect.minX + 20...cellRect.maxX - 20),
//                        y: CGFloat.random(in: cellRect.minY + 20...cellRect.maxY - 20)
//                    )
////                    let border = SKShapeNode(rectOf: egg.size)
////                    border.strokeColor = .black
////                    border.lineWidth = 2
////                    egg.addChild(border)
//                    addChild(egg)
//                    eggs.append(egg)
//                }
//            }
//        }
//    }
    
    func createEggs() {
        let rows = Int(size.height / cellSize.height)
        let cols = Int(size.width / cellSize.width)

        for row in 0..<rows {
            for col in 0..<cols {
                let cellRect = CGRect(
                    x: CGFloat(col) * cellSize.width,
                    y: CGFloat(row) * cellSize.height,
                    width: cellSize.width,
                    height: cellSize.height
                )
                let numEggs = Int.random(in: 1...2)
                for _ in 0..<numEggs {
                    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —è–π—Ü–∞
                    let eggTypes = ["eggWhite", "eggBlue", "eggPink"]
                    let randomEggType = eggTypes.randomElement()!

                    let egg = SKSpriteNode(imageNamed: randomEggType)
                    egg.size = CGSize(width: 20, height: 20)
                    egg.position = CGPoint(
                        x: CGFloat.random(in: cellRect.minX + 20...cellRect.maxX - 20),
                        y: CGFloat.random(in: cellRect.minY + 20...cellRect.maxY - 20)
                    )
                    egg.name = randomEggType // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    addChild(egg)
                    eggs.append(egg)
                    let defaults = UserDefaults.standard
                    switch randomEggType {
                                        case "eggWhite":
                        let count = defaults.integer(forKey: "whiteEggCount") + 1
                        defaults.set(count, forKey: "whiteEggCount")
                                        case "eggBlue":
                        let count = defaults.integer(forKey: "blueEggCount") + 1
                        defaults.set(count, forKey: "blueEggCount")
                                        case "eggPink":
                        let count = defaults.integer(forKey: "pinkEggCount") + 1
                        defaults.set(count, forKey: "pinkEggCount")
                                        default:
                                            break
                                        }
                }
            }
        }
    }
    
    enum EggType: String {
        case white = "eggWhite"
        case blue = "eggBlue"
        case pink = "eggPink"
    }

    override func update(_ currentTime: TimeInterval) {
        guard let joystick = joystick, let chicken = chicken else { return }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä–∏—Ü—ã
        let speed: CGFloat = 2.0
        let dx = joystick.x * speed
        let dy = joystick.y * speed
        chicken.physicsBody?.velocity = CGVector(dx: dx * 50, dy: dy * 50)
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ —è–∏—Ü
//        for (index, egg) in eggs.enumerated().reversed() {
//            if chicken.frame.intersects(egg.frame) {
//                egg.removeFromParent()
//                eggs.remove(at: index)
//            }
//        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ —è–∏—Ü
                for (index, egg) in eggs.enumerated().reversed() {
                    if chicken.frame.intersects(egg.frame) {
                        if let eggName = egg.name, let eggType = EggType(rawValue: eggName) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤ UserDefaults
                            let defaults = UserDefaults.standard
                            switch eggType {
                            case .white:
                                let count = defaults.integer(forKey: "whiteegg") + 1
                                defaults.set(count, forKey: "whiteegg")
                            case .blue:
                                let count = defaults.integer(forKey: "blueegg") + 1
                                defaults.set(count, forKey: "blueegg")
                            case .pink:
                                let count = defaults.integer(forKey: "pinkegg") + 1
                                defaults.set(count, forKey: "pinkegg")
                            }
                        }
                        egg.removeFromParent()
                        eggs.remove(at: index)
                    }
                }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è –ª–∏—Å—ã
        if currentTime - lastPathUpdateTime >= pathUpdateInterval {
            path = findPath(from: fox.position, to: chicken.position)
            lastPathUpdateTime = currentTime // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –ª–∏—Å—ã –ø–æ –ø—É—Ç–∏
        if !path.isEmpty {
            let nextPoint = path.first!
            let foxDX = nextPoint.x - fox.position.x
            let foxDY = nextPoint.y - fox.position.y
            let distance = sqrt(foxDX * foxDX + foxDY * foxDY)
            
            if distance < 5 {
                path.removeFirst() // –î–æ—Å—Ç–∏–≥–ª–∏ —Ç–æ—á–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
            } else {
                let foxSpeed: CGFloat = 1.5
                fox.position = CGPoint(
                    x: fox.position.x + foxDX / distance * foxSpeed,
                    y: fox.position.y + foxDY / distance * foxSpeed
                )
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
        if chicken.frame.intersects(fox.frame) {
            let defaults = UserDefaults.standard
            let count = defaults.integer(forKey: "lifeBalance") - 1
            defaults.set(count, forKey: "lifeBalance")
            print("–ü—Ä–æ–∏–≥—Ä—ã—à!")
        } else if eggs.isEmpty {
            print("–ü–æ–±–µ–¥–∞!")
        }
    }
}
